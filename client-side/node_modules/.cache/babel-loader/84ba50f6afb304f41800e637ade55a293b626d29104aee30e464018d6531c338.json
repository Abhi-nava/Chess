{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srini\\\\clg_stuff\\\\2nd year\\\\Coding\\\\WebTech\\\\Project\\\\Final_Project\\\\client\\\\src\\\\bots\\\\CompVsComp.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport Chess from \"chess.js\";\nimport Engine from \"./engine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ComputerVsComputer() {\n  _s();\n  const engine = useMemo(() => new Engine(), []);\n  const game = useMemo(() => new Chess(), []);\n  const [gamePosition, setGamePosition] = useState(game.fen());\n  const moveDelay = 1000; // 1 second delay between moves, can be changed\n  const delayBeforeNewGame = 3000; // 3 seconds delay before restarting, can be changed\n\n  // Function to get a random Stockfish level between 2 and 10\n  function getRandomStockfishLevel() {\n    return Math.floor(Math.random() * (10 - 2 + 1)) + 2; // Random number between 2 and 10\n  }\n\n  // Function to find the best move using Stockfish with a randomized level\n  const findBestMove = useCallback(() => {\n    const randomLevel = getRandomStockfishLevel(); // Randomize the Stockfish level\n    engine.evaluatePosition(game.fen(), randomLevel);\n    engine.onMessage(({\n      bestMove\n    }) => {\n      if (bestMove) {\n        // Make the best move found by Stockfish\n        game.move({\n          from: bestMove.substring(0, 2),\n          to: bestMove.substring(2, 4),\n          promotion: bestMove.substring(4, 5) || \"q\" // Promote to queen if necessary\n        });\n        setGamePosition(game.fen());\n      }\n    });\n  }, [game, engine]); // Add game and engine as dependencies\n\n  // Trigger the computers to play each other with a delay between moves\n  useEffect(() => {\n    if (!game.game_over() && !game.in_draw()) {\n      const timeout = setTimeout(() => {\n        findBestMove(); // Make the best move after the delay\n      }, moveDelay); // Delay between moves\n\n      return () => clearTimeout(timeout); // Clean up the timeout on unmount\n    } else {\n      // After the game is over, reset the game after a delay\n      const timeout = setTimeout(() => {\n        game.reset();\n        setGamePosition(game.fen());\n      }, delayBeforeNewGame);\n      return () => clearTimeout(timeout); // Clean up the timeout on unmount\n    }\n  }, [gamePosition, findBestMove, game]); // Add findBestMove and game as dependencies\n\n  const customPieces = useMemo(() => {\n    const pieces = [\"wP\", \"wN\", \"wB\", \"wR\", \"wQ\", \"wK\", \"bP\", \"bN\", \"bB\", \"bR\", \"bQ\", \"bK\"];\n    const pieceComponents = {};\n    pieces.forEach(piece => {\n      pieceComponents[piece] = ({\n        squareWidth\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: squareWidth,\n          height: squareWidth,\n          backgroundImage: `url(/img/chesspieces/${piece}.png)`,\n          backgroundSize: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    });\n    return pieceComponents;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Chessboard, {\n    id: \"ComputerVsComputer\",\n    position: gamePosition,\n    boardWidth: 550,\n    customBoardStyle: {\n      borderRadius: \"4px\",\n      boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.5)\"\n    },\n    customDarkSquareStyle: {\n      backgroundColor: \"#779952\"\n    },\n    customLightSquareStyle: {\n      backgroundColor: \"#edeed1\"\n    },\n    customPieces: customPieces,\n    isDraggablePiece: () => false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(ComputerVsComputer, \"/+SiX69NEQJ/YAaDdiOTuAzsPlw=\");\n_c = ComputerVsComputer;\nvar _c;\n$RefreshReg$(_c, \"ComputerVsComputer\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useCallback","Chessboard","Chess","Engine","jsxDEV","_jsxDEV","ComputerVsComputer","_s","engine","game","gamePosition","setGamePosition","fen","moveDelay","delayBeforeNewGame","getRandomStockfishLevel","Math","floor","random","findBestMove","randomLevel","evaluatePosition","onMessage","bestMove","move","from","substring","to","promotion","game_over","in_draw","timeout","setTimeout","clearTimeout","reset","customPieces","pieces","pieceComponents","forEach","piece","squareWidth","style","width","height","backgroundImage","backgroundSize","fileName","_jsxFileName","lineNumber","columnNumber","id","position","boardWidth","customBoardStyle","borderRadius","boxShadow","customDarkSquareStyle","backgroundColor","customLightSquareStyle","isDraggablePiece","_c","$RefreshReg$"],"sources":["C:/Users/srini/clg_stuff/2nd year/Coding/WebTech/Project/Final_Project/client/src/bots/CompVsComp.js"],"sourcesContent":["import React, { useMemo, useState, useEffect, useCallback } from \"react\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport Chess from \"chess.js\";\r\nimport Engine from \"./engine\";\r\n\r\nexport default function ComputerVsComputer() {\r\n  const engine = useMemo(() => new Engine(), []);\r\n  const game = useMemo(() => new Chess(), []);\r\n  const [gamePosition, setGamePosition] = useState(game.fen());\r\n  const moveDelay = 1000; // 1 second delay between moves, can be changed\r\n  const delayBeforeNewGame = 3000; // 3 seconds delay before restarting, can be changed\r\n\r\n  // Function to get a random Stockfish level between 2 and 10\r\n  function getRandomStockfishLevel() {\r\n    return Math.floor(Math.random() * (10 - 2 + 1)) + 2; // Random number between 2 and 10\r\n  }\r\n\r\n  // Function to find the best move using Stockfish with a randomized level\r\n  const findBestMove = useCallback(() => {\r\n    const randomLevel = getRandomStockfishLevel(); // Randomize the Stockfish level\r\n    engine.evaluatePosition(game.fen(), randomLevel);\r\n    engine.onMessage(({ bestMove }) => {\r\n      if (bestMove) {\r\n        // Make the best move found by Stockfish\r\n        game.move({\r\n          from: bestMove.substring(0, 2),\r\n          to: bestMove.substring(2, 4),\r\n          promotion: bestMove.substring(4, 5) || \"q\", // Promote to queen if necessary\r\n        });\r\n        setGamePosition(game.fen());\r\n      }\r\n    });\r\n  }, [game, engine]); // Add game and engine as dependencies\r\n\r\n  // Trigger the computers to play each other with a delay between moves\r\n  useEffect(() => {\r\n    if (!game.game_over() && !game.in_draw()) {\r\n      const timeout = setTimeout(() => {\r\n        findBestMove(); // Make the best move after the delay\r\n      }, moveDelay); // Delay between moves\r\n\r\n      return () => clearTimeout(timeout); // Clean up the timeout on unmount\r\n    } else {\r\n      // After the game is over, reset the game after a delay\r\n      const timeout = setTimeout(() => {\r\n        game.reset();\r\n        setGamePosition(game.fen());\r\n      }, delayBeforeNewGame);\r\n\r\n      return () => clearTimeout(timeout); // Clean up the timeout on unmount\r\n    }\r\n  }, [gamePosition, findBestMove, game]); // Add findBestMove and game as dependencies\r\n\r\n  const customPieces = useMemo(() => {\r\n    const pieces = [\"wP\", \"wN\", \"wB\", \"wR\", \"wQ\", \"wK\", \"bP\", \"bN\", \"bB\", \"bR\", \"bQ\", \"bK\"];\r\n    const pieceComponents = {};\r\n    pieces.forEach(piece => {\r\n      pieceComponents[piece] = ({ squareWidth }) => (\r\n        <div\r\n          style={{\r\n            width: squareWidth,\r\n            height: squareWidth,\r\n            backgroundImage: `url(/img/chesspieces/${piece}.png)`,\r\n            backgroundSize: \"100%\"\r\n          }}\r\n        />\r\n      );\r\n    });\r\n    return pieceComponents;\r\n  }, []);\r\n\r\n  return (\r\n    <Chessboard\r\n      id=\"ComputerVsComputer\"\r\n      position={gamePosition}\r\n      boardWidth={550}\r\n      customBoardStyle={{\r\n        borderRadius: \"4px\",\r\n        boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.5)\",\r\n      }}\r\n      customDarkSquareStyle={{ backgroundColor: \"#779952\" }}\r\n      customLightSquareStyle={{ backgroundColor: \"#edeed1\" }}\r\n      customPieces={customPieces}\r\n      isDraggablePiece={() => false}\r\n    />\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxE,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC3C,MAAMC,MAAM,GAAGX,OAAO,CAAC,MAAM,IAAIM,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;EAC9C,MAAMM,IAAI,GAAGZ,OAAO,CAAC,MAAM,IAAIK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC3C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAACW,IAAI,CAACG,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAMC,SAAS,GAAG,IAAI,CAAC,CAAC;EACxB,MAAMC,kBAAkB,GAAG,IAAI,CAAC,CAAC;;EAEjC;EACA,SAASC,uBAAuBA,CAAA,EAAG;IACjC,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACvD;;EAEA;EACA,MAAMC,YAAY,GAAGnB,WAAW,CAAC,MAAM;IACrC,MAAMoB,WAAW,GAAGL,uBAAuB,CAAC,CAAC,CAAC,CAAC;IAC/CP,MAAM,CAACa,gBAAgB,CAACZ,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEQ,WAAW,CAAC;IAChDZ,MAAM,CAACc,SAAS,CAAC,CAAC;MAAEC;IAAS,CAAC,KAAK;MACjC,IAAIA,QAAQ,EAAE;QACZ;QACAd,IAAI,CAACe,IAAI,CAAC;UACRC,IAAI,EAAEF,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;UAC9BC,EAAE,EAAEJ,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;UAC5BE,SAAS,EAAEL,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAE;QAC9C,CAAC,CAAC;QACFf,eAAe,CAACF,IAAI,CAACG,GAAG,CAAC,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACH,IAAI,EAAED,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEpB;EACAT,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,IAAI,CAACoB,SAAS,CAAC,CAAC,IAAI,CAACpB,IAAI,CAACqB,OAAO,CAAC,CAAC,EAAE;MACxC,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/Bb,YAAY,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,EAAEN,SAAS,CAAC,CAAC,CAAC;;MAEf,OAAO,MAAMoB,YAAY,CAACF,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACL;MACA,MAAMA,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/BvB,IAAI,CAACyB,KAAK,CAAC,CAAC;QACZvB,eAAe,CAACF,IAAI,CAACG,GAAG,CAAC,CAAC,CAAC;MAC7B,CAAC,EAAEE,kBAAkB,CAAC;MAEtB,OAAO,MAAMmB,YAAY,CAACF,OAAO,CAAC,CAAC,CAAC;IACtC;EACF,CAAC,EAAE,CAACrB,YAAY,EAAES,YAAY,EAAEV,IAAI,CAAC,CAAC,CAAC,CAAC;;EAExC,MAAM0B,YAAY,GAAGtC,OAAO,CAAC,MAAM;IACjC,MAAMuC,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACvF,MAAMC,eAAe,GAAG,CAAC,CAAC;IAC1BD,MAAM,CAACE,OAAO,CAACC,KAAK,IAAI;MACtBF,eAAe,CAACE,KAAK,CAAC,GAAG,CAAC;QAAEC;MAAY,CAAC,kBACvCnC,OAAA;QACEoC,KAAK,EAAE;UACLC,KAAK,EAAEF,WAAW;UAClBG,MAAM,EAAEH,WAAW;UACnBI,eAAe,EAAE,wBAAwBL,KAAK,OAAO;UACrDM,cAAc,EAAE;QAClB;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACF;IACH,CAAC,CAAC;IACF,OAAOZ,eAAe;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhC,OAAA,CAACJ,UAAU;IACTiD,EAAE,EAAC,oBAAoB;IACvBC,QAAQ,EAAEzC,YAAa;IACvB0C,UAAU,EAAE,GAAI;IAChBC,gBAAgB,EAAE;MAChBC,YAAY,EAAE,KAAK;MACnBC,SAAS,EAAE;IACb,CAAE;IACFC,qBAAqB,EAAE;MAAEC,eAAe,EAAE;IAAU,CAAE;IACtDC,sBAAsB,EAAE;MAAED,eAAe,EAAE;IAAU,CAAE;IACvDtB,YAAY,EAAEA,YAAa;IAC3BwB,gBAAgB,EAAEA,CAAA,KAAM;EAAM;IAAAb,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEN;AAAC1C,EAAA,CAjFuBD,kBAAkB;AAAAsD,EAAA,GAAlBtD,kBAAkB;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}