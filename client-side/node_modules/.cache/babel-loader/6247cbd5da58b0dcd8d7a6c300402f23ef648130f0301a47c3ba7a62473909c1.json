{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srini\\\\clg_stuff\\\\2nd year\\\\Coding\\\\WebTech\\\\Project\\\\Final_Project\\\\client\\\\src\\\\bots\\\\playComputer.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useRef, useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport Chess from 'chess.js';\nimport Engine from './engine';\nimport './../css/PlayComputer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayVsStockfish = () => {\n  _s();\n  const levels = {\n    \"Easy 🤓\": 2,\n    \"Medium 🧐\": 8,\n    \"Hard 😵\": 18\n  };\n  const engine = useMemo(() => new Engine(), []);\n  const game = useMemo(() => new Chess(), []);\n  const [gamePosition, setGamePosition] = useState(game.fen());\n  const [moves, setMoves] = useState([]); // Track the moves\n  const [stockfishLevel, setStockfishLevel] = useState(2);\n  const [currentTimeout, setCurrentTimeout] = useState(null);\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true); // Track if it's player's turn\n  const [gameOver, setGameOver] = useState(false);\n  const [result, setResult] = useState('');\n  const [playerColor, setPlayerColor] = useState('white'); // Track player's chosen color\n  const [boardOrientation, setBoardOrientation] = useState('white'); // Track board orientation\n  const [showSideSelectionModal, setShowSideSelectionModal] = useState(false); // Show modal to select side\n  const chessboardRef = useRef(null);\n  const movesEndRef = useRef(null); // Reference to the bottom of the move list\n\n  function findBestMove() {\n    engine.evaluatePosition(game.fen(), stockfishLevel);\n    engine.onMessage(({\n      bestMove\n    }) => {\n      if (bestMove) {\n        game.move({\n          from: bestMove.substring(0, 2),\n          to: bestMove.substring(2, 4),\n          promotion: bestMove.substring(4, 5) || \"q\"\n        });\n        setGamePosition(game.fen());\n        setIsPlayerTurn(true); // After Stockfish's move, it's player's turn again\n        updateMoves(game.history()); // Update move history\n\n        if (game.game_over()) {\n          handleGameOver(); // Handle game over after Stockfish's move\n        }\n      }\n    });\n  }\n  function updateMoves(history) {\n    setMoves([...history]); // Update moves array with game history\n  }\n  function onDrop(sourceSquare, targetSquare, piece) {\n    var _piece$1$toLowerCase;\n    if (!isPlayerTurn) return false; // Block player move if it's not their turn\n\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: (_piece$1$toLowerCase = piece[1].toLowerCase()) !== null && _piece$1$toLowerCase !== void 0 ? _piece$1$toLowerCase : \"q\"\n    });\n    if (move === null) return false;\n    setGamePosition(game.fen());\n    setIsPlayerTurn(false); // Now it's Stockfish's turn\n    updateMoves(game.history()); // Update move history\n\n    if (game.game_over()) {\n      handleGameOver();\n    } else if (!game.in_draw()) {\n      const newTimeout = setTimeout(findBestMove, 2000); // Find best move after 2 seconds\n      setCurrentTimeout(newTimeout);\n    }\n    return true;\n  }\n  function handleGameOver() {\n    if (game.in_draw()) {\n      setResult('It\\'s a draw!');\n    } else if (game.turn() === 'b') {\n      setResult('White wins!');\n    } else {\n      setResult('Black wins!');\n    }\n    setGameOver(true);\n  }\n  function undoLastMove() {\n    var _chessboardRef$curren;\n    if (isPlayerTurn) {\n      game.undo(); // Undo Stockfish's move\n      game.undo(); // Undo player's move\n    } else {\n      game.undo(); // Undo player's move\n    }\n    setGamePosition(game.fen());\n    setIsPlayerTurn(true); // After undoing, it's player's turn again\n    (_chessboardRef$curren = chessboardRef.current) === null || _chessboardRef$curren === void 0 ? void 0 : _chessboardRef$curren.clearPremoves(); // Clear premoves\n    clearTimeout(currentTimeout); // Clear any timeouts\n    updateMoves(game.history()); // Update move history\n  }\n  const customPieces = useMemo(() => {\n    const pieces = [\"wP\", \"wN\", \"wB\", \"wR\", \"wQ\", \"wK\", \"bP\", \"bN\", \"bB\", \"bR\", \"bQ\", \"bK\"];\n    const pieceComponents = {};\n    pieces.forEach(piece => {\n      pieceComponents[piece] = ({\n        squareWidth\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: squareWidth,\n          height: squareWidth,\n          backgroundImage: `url(/img/chesspieces/${piece}.png)`,\n          backgroundSize: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this);\n    });\n    return pieceComponents;\n  }, []);\n\n  // useEffect to scroll the moves display to the bottom when moves change\n  useEffect(() => {\n    var _movesEndRef$current;\n    (_movesEndRef$current = movesEndRef.current) === null || _movesEndRef$current === void 0 ? void 0 : _movesEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [moves]);\n  const GameOverModal = ({\n    result,\n    onClose\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"close-button\",\n        className: \"button-options\",\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n  const SideSelectionModal = ({\n    onSelectSide\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose Your Side\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"play-white\",\n          className: \"button-options\",\n          onClick: () => onSelectSide('white'),\n          children: \"Play as White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"play-black\",\n          className: \"button-options\",\n          onClick: () => onSelectSide('black'),\n          children: \"Play as Black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n  const handleSideSelection = color => {\n    var _chessboardRef$curren2;\n    setPlayerColor(color);\n    setBoardOrientation(color); // Set board orientation based on selected color\n    game.reset();\n    setGamePosition(game.fen());\n    setIsPlayerTurn(color === 'white'); // White starts first\n    (_chessboardRef$curren2 = chessboardRef.current) === null || _chessboardRef$curren2 === void 0 ? void 0 : _chessboardRef$curren2.clearPremoves();\n    clearTimeout(currentTimeout); // Clear any timeouts\n    setMoves([]);\n    setShowSideSelectionModal(false); // Close the modal after selection\n\n    // If the player chooses black, let the engine (Stockfish) play as white immediately\n    if (color === 'black') {\n      const newTimeout = setTimeout(findBestMove, 2000); // Delay the computer's move by 2 seconds\n      setCurrentTimeout(newTimeout);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"complete-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n        id: \"PlayVsStockfish\",\n        arePremovesAllowed: true,\n        position: gamePosition,\n        boardOrientation: boardOrientation // Set board orientation based on player color\n        ,\n        isDraggablePiece: ({\n          piece\n        }) => piece[0] === playerColor[0] // Only player's pieces are draggable\n        ,\n        onPieceDrop: onDrop,\n        boardWidth: 550,\n        customBoardStyle: {\n          borderRadius: \"4px\",\n          boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.5)\"\n        },\n        customDarkSquareStyle: {\n          backgroundColor: \"#779952\"\n        },\n        customLightSquareStyle: {\n          backgroundColor: \"#edeed1\"\n        },\n        customPieces: customPieces,\n        ref: chessboardRef // Chessboard ref for clearing premoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: Object.entries(levels).map(([level, depth]) => /*#__PURE__*/_jsxDEV(\"button\", {\n          id: `button-${level.replace(/\\s/g, '').toLowerCase()}`,\n          className: `button ${depth === stockfishLevel ? 'button-active' : ''}`,\n          onClick: () => setStockfishLevel(depth),\n          children: level\n        }, level, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MoveDisplay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"move-heading\",\n          children: \"Moves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"outer-table\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"moves-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [moves.map((move, index) => index % 2 === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"move-number\",\n                  children: [Math.floor(index / 2) + 1, \".\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"white-move\",\n                  children: move\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"black-move\",\n                  children: moves[index + 1] || ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 21\n              }, this) : null), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: \"3\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: movesEndRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"button-new\",\n          className: \"button\",\n          onClick: () => setShowSideSelectionModal(true) // Open side selection modal\n          ,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"button-undo\",\n          className: \"button\",\n          onClick: undoLastMove // Call the updated undo function\n          ,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), showSideSelectionModal && /*#__PURE__*/_jsxDEV(SideSelectionModal, {\n      onSelectSide: handleSideSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(GameOverModal, {\n      result: result,\n      onClose: () => setGameOver(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayVsStockfish, \"GXNm1lY1MDu/0NMPxrCdXR30XcI=\");\n_c = PlayVsStockfish;\nexport default PlayVsStockfish;\nvar _c;\n$RefreshReg$(_c, \"PlayVsStockfish\");","map":{"version":3,"names":["React","useMemo","useRef","useState","useEffect","Chessboard","Chess","Engine","jsxDEV","_jsxDEV","PlayVsStockfish","_s","levels","engine","game","gamePosition","setGamePosition","fen","moves","setMoves","stockfishLevel","setStockfishLevel","currentTimeout","setCurrentTimeout","isPlayerTurn","setIsPlayerTurn","gameOver","setGameOver","result","setResult","playerColor","setPlayerColor","boardOrientation","setBoardOrientation","showSideSelectionModal","setShowSideSelectionModal","chessboardRef","movesEndRef","findBestMove","evaluatePosition","onMessage","bestMove","move","from","substring","to","promotion","updateMoves","history","game_over","handleGameOver","onDrop","sourceSquare","targetSquare","piece","_piece$1$toLowerCase","toLowerCase","in_draw","newTimeout","setTimeout","turn","undoLastMove","_chessboardRef$curren","undo","current","clearPremoves","clearTimeout","customPieces","pieces","pieceComponents","forEach","squareWidth","style","width","height","backgroundImage","backgroundSize","fileName","_jsxFileName","lineNumber","columnNumber","_movesEndRef$current","scrollIntoView","behavior","GameOverModal","onClose","className","children","id","onClick","SideSelectionModal","onSelectSide","handleSideSelection","color","_chessboardRef$curren2","reset","arePremovesAllowed","position","isDraggablePiece","onPieceDrop","boardWidth","customBoardStyle","borderRadius","boxShadow","customDarkSquareStyle","backgroundColor","customLightSquareStyle","ref","Object","entries","map","level","depth","replace","index","Math","floor","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/srini/clg_stuff/2nd year/Coding/WebTech/Project/Final_Project/client/src/bots/playComputer.js"],"sourcesContent":["import React, { useMemo, useRef, useState, useEffect } from 'react';\r\nimport { Chessboard } from 'react-chessboard';\r\nimport Chess from 'chess.js';\r\nimport Engine from './engine';\r\nimport './../css/PlayComputer.css';\r\n\r\nconst PlayVsStockfish = () => {\r\n  const levels = {\r\n    \"Easy 🤓\": 2,\r\n    \"Medium 🧐\": 8,\r\n    \"Hard 😵\": 18\r\n  };\r\n\r\n  const engine = useMemo(() => new Engine(), []);\r\n  const game = useMemo(() => new Chess(), []);\r\n  const [gamePosition, setGamePosition] = useState(game.fen());\r\n  const [moves, setMoves] = useState([]);  // Track the moves\r\n  const [stockfishLevel, setStockfishLevel] = useState(2);\r\n  const [currentTimeout, setCurrentTimeout] = useState(null);\r\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true); // Track if it's player's turn\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [result, setResult] = useState('');\r\n  const [playerColor, setPlayerColor] = useState('white'); // Track player's chosen color\r\n  const [boardOrientation, setBoardOrientation] = useState('white'); // Track board orientation\r\n  const [showSideSelectionModal, setShowSideSelectionModal] = useState(false); // Show modal to select side\r\n  const chessboardRef = useRef(null);\r\n  const movesEndRef = useRef(null); // Reference to the bottom of the move list\r\n\r\n  function findBestMove() {\r\n    engine.evaluatePosition(game.fen(), stockfishLevel);\r\n    engine.onMessage(({ bestMove }) => {\r\n      if (bestMove) {\r\n        game.move({\r\n          from: bestMove.substring(0, 2),\r\n          to: bestMove.substring(2, 4),\r\n          promotion: bestMove.substring(4, 5) || \"q\"\r\n        });\r\n        setGamePosition(game.fen());\r\n        setIsPlayerTurn(true); // After Stockfish's move, it's player's turn again\r\n        updateMoves(game.history()); // Update move history\r\n  \r\n        if (game.game_over()) {\r\n          handleGameOver(); // Handle game over after Stockfish's move\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  function updateMoves(history) {\r\n    setMoves([...history]);  // Update moves array with game history\r\n  }\r\n\r\n  function onDrop(sourceSquare, targetSquare, piece) {\r\n    if (!isPlayerTurn) return false; // Block player move if it's not their turn\r\n  \r\n    const move = game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: piece[1].toLowerCase() ?? \"q\"\r\n    });\r\n  \r\n    if (move === null) return false;\r\n  \r\n    setGamePosition(game.fen());\r\n    setIsPlayerTurn(false); // Now it's Stockfish's turn\r\n    updateMoves(game.history()); // Update move history\r\n  \r\n    if (game.game_over()) {\r\n      handleGameOver();\r\n    } else if (!game.in_draw()) {\r\n      const newTimeout = setTimeout(findBestMove, 2000); // Find best move after 2 seconds\r\n      setCurrentTimeout(newTimeout);\r\n    }\r\n  \r\n    return true;\r\n  }\r\n  \r\n  function handleGameOver() {\r\n    if (game.in_draw()) {\r\n      setResult('It\\'s a draw!');\r\n    } else if (game.turn() === 'b') {\r\n      setResult('White wins!');\r\n    } else {\r\n      setResult('Black wins!');\r\n    }\r\n    setGameOver(true);\r\n  }\r\n  \r\n\r\n  function undoLastMove() {\r\n    if (isPlayerTurn) {\r\n      game.undo(); // Undo Stockfish's move\r\n      game.undo(); // Undo player's move\r\n    } else {\r\n      game.undo(); // Undo player's move\r\n    }\r\n\r\n    setGamePosition(game.fen());\r\n    setIsPlayerTurn(true); // After undoing, it's player's turn again\r\n    chessboardRef.current?.clearPremoves(); // Clear premoves\r\n    clearTimeout(currentTimeout); // Clear any timeouts\r\n    updateMoves(game.history()); // Update move history\r\n  }\r\n\r\n  const customPieces = useMemo(() => {\r\n    const pieces = [\"wP\", \"wN\", \"wB\", \"wR\", \"wQ\", \"wK\", \"bP\", \"bN\", \"bB\", \"bR\", \"bQ\", \"bK\"];\r\n    const pieceComponents = {};\r\n    pieces.forEach(piece => {\r\n      pieceComponents[piece] = ({ squareWidth }) => (\r\n        <div\r\n          style={{\r\n            width: squareWidth,\r\n            height: squareWidth,\r\n            backgroundImage: `url(/img/chesspieces/${piece}.png)`,\r\n            backgroundSize: \"100%\"\r\n          }}\r\n        />\r\n      );\r\n    });\r\n    return pieceComponents;\r\n  }, []);\r\n\r\n  // useEffect to scroll the moves display to the bottom when moves change\r\n  useEffect(() => {\r\n    movesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [moves]);\r\n\r\n  const GameOverModal = ({ result, onClose }) => (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <h2>{result}</h2>\r\n        <button id='close-button' className='button-options' onClick={onClose}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const SideSelectionModal = ({ onSelectSide }) => (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <h2>Choose Your Side</h2>\r\n        <div className=\"button-container\">\r\n          <button id=\"play-white\" className='button-options' onClick={() => onSelectSide('white')}>Play as White</button>\r\n          <button id=\"play-black\" className='button-options' onClick={() => onSelectSide('black')}>Play as Black</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n  const handleSideSelection = (color) => {\r\n    setPlayerColor(color);\r\n    setBoardOrientation(color); // Set board orientation based on selected color\r\n    game.reset();\r\n    setGamePosition(game.fen());\r\n    setIsPlayerTurn(color === 'white'); // White starts first\r\n    chessboardRef.current?.clearPremoves();\r\n    clearTimeout(currentTimeout); // Clear any timeouts\r\n    setMoves([]);\r\n    setShowSideSelectionModal(false); // Close the modal after selection\r\n    \r\n    // If the player chooses black, let the engine (Stockfish) play as white immediately\r\n    if (color === 'black') {\r\n      const newTimeout = setTimeout(findBestMove, 2000); // Delay the computer's move by 2 seconds\r\n      setCurrentTimeout(newTimeout);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"complete-wrapper\">\r\n      <div className='board-wrapper'>\r\n        <Chessboard\r\n          id=\"PlayVsStockfish\"\r\n          arePremovesAllowed={true}\r\n          position={gamePosition}\r\n          boardOrientation={boardOrientation} // Set board orientation based on player color\r\n          isDraggablePiece={({ piece }) => piece[0] === playerColor[0]} // Only player's pieces are draggable\r\n          onPieceDrop={onDrop}\r\n          boardWidth={550}\r\n          customBoardStyle={{\r\n            borderRadius: \"4px\",\r\n            boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.5)\"\r\n          }}\r\n          customDarkSquareStyle={{\r\n            backgroundColor: \"#779952\"\r\n          }}\r\n          customLightSquareStyle={{\r\n            backgroundColor: \"#edeed1\"\r\n          }}\r\n          customPieces={customPieces}\r\n          ref={chessboardRef} // Chessboard ref for clearing premoves\r\n        />\r\n\r\n        <div className=\"button-container\">\r\n          {Object.entries(levels).map(([level, depth]) => (\r\n            <button\r\n              key={level}\r\n              id={`button-${level.replace(/\\s/g, '').toLowerCase()}`}\r\n              className={`button ${depth === stockfishLevel ? 'button-active' : ''}`}\r\n              onClick={() => setStockfishLevel(depth)}\r\n            >\r\n              {level}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className='right-wrapper'>\r\n        <div className=\"MoveDisplay\">\r\n          <h2 id='move-heading'>Moves</h2>\r\n          <div className='outer-table'>\r\n            <table className=\"moves-table\">\r\n              <tbody>\r\n                {moves.map((move, index) => (\r\n                  index % 2 === 0 ? (\r\n                    <tr key={index}>\r\n                      <td className=\"move-number\">{Math.floor(index / 2) + 1}.</td>\r\n                      <td className=\"white-move\">{move}</td>\r\n                      <td className=\"black-move\">{moves[index + 1] || ''}</td>\r\n                    </tr>\r\n                  ) : null\r\n                ))}\r\n                {/* Empty div used for scrolling to the bottom */}\r\n                <tr>\r\n                  <td colSpan=\"3\">\r\n                    <div ref={movesEndRef} />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        <div className='button-container'>\r\n          <button\r\n            id='button-new'\r\n            className=\"button\"\r\n            onClick={() => setShowSideSelectionModal(true)} // Open side selection modal\r\n          >\r\n            New Game\r\n          </button>\r\n\r\n          <button\r\n            id='button-undo'\r\n            className=\"button\"\r\n            onClick={undoLastMove} // Call the updated undo function\r\n          >\r\n            Undo\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {showSideSelectionModal && (\r\n        <SideSelectionModal onSelectSide={handleSideSelection} />\r\n      )}\r\n      {gameOver && (\r\n      <GameOverModal \r\n        result={result} \r\n        onClose={() => setGameOver(false)} \r\n      />\r\n    )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayVsStockfish;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}